name: Build Project
description: 'Build project with Poetry'

inputs:
  python-version:
    description: 'The version of Python to use'
    required: true
  install-dev-deps:
    description: 'Whether to install dev dependencies'
    required: false
    default: 'false'
  workflow-ref:
    description: 'The ref of the workflow to use'
    required: false
    default: ${{ github.workflow_ref }}

runs:
  using: 'composite'

  steps:
    # Weird workaround so that the other actions and workflows calling this can see it
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.workflow-ref }}
        repository: eshwen/adrenaline

    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Get full Python version
      id: full-python-version
      run: echo "version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")" >> $GITHUB_OUTPUT
      shell: bash

    - name: Bootstrap poetry
      run: |
        curl -sL https://install.python-poetry.org | python - -y
      shell: bash

    - name: Update PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Configure poetry
      run: |
        poetry config virtualenvs.in-project true
      shell: bash

    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s poetry run pip --version || rm -rf .venv
      shell: bash

    - name: Install Dependencies (without dev)
      run: |
        poetry install --without dev
      shell: bash
      if: ${{ inputs.install-dev-deps == 'false' }}

    - name: Install Dependencies (with dev)
      run: |
        poetry install
      shell: bash
      if: ${{ inputs.install-dev-deps == 'true' }}
